import type { ParsedContent } from '@nuxt/content';
export declare const useContentState: <G extends object = Record<string, unknown>>() => {
    pages: import("vue").Ref<Record<string, ParsedContent>, Record<string, ParsedContent>>;
    surrounds: import("vue").Ref<Record<string, [Omit<ParsedContent, "body"> | null, Omit<ParsedContent, "body"> | null]>, Record<string, [Omit<ParsedContent, "body"> | null, Omit<ParsedContent, "body"> | null]>>;
    navigation: import("vue").Ref<NavItem[], NavItem[]>;
    globals: import("vue").Ref<Record<string, G>, Record<string, G>>;
};
export declare const useContent: <T extends ParsedContent, G extends object = Record<string, unknown>>() => {
    globals: import("vue").Ref<Record<string, G>, Record<string, G>>;
    navigation: import("vue").Ref<NavItem[], NavItem[]>;
    surround: import("vue").ComputedRef<[Omit<ParsedContent, "body"> | null, Omit<ParsedContent, "body"> | null] | undefined>;
    page: import("vue").ComputedRef<T>;
    excerpt: import("vue").ComputedRef<any>;
    toc: import("vue").ComputedRef<any>;
    type: import("vue").ComputedRef<any>;
    layout: import("vue").ComputedRef<any>;
    next: import("vue").ComputedRef<Omit<ParsedContent, "body"> | null | undefined>;
    prev: import("vue").ComputedRef<Omit<ParsedContent, "body"> | null | undefined>;
};
