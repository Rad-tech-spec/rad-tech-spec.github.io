import os from 'node:os';
import process from 'node:process';
import { d as defineCommand, b as legacyRootDirArgs, c as cwdArgs, v as version } from '../shared/nuxi.GLC40kEn.mjs';
import clipboard from './index3.mjs';
import { r as readPackageJSON } from '../shared/nuxi.D3mADRf9.mjs';
import { s as splitByCase } from '../shared/nuxi.BjhZEm2-.mjs';
import { l as logger, v } from '../shared/nuxi.DQjfoGl0.mjs';
import { t as tryResolveNuxt } from '../shared/nuxi.BiWTNJI4.mjs';
import { g as getPackageManagerVersion } from '../shared/nuxi.BSm0_9Hr.mjs';
import { r as resolve } from '../shared/nuxi.Do0aYBCO.mjs';
import { d as detectPackageManager } from '../shared/nuxi.CSWGOxQ4.mjs';
import 'node:crypto';
import 'node:path';
import 'node:tty';
import 'node:url';
import 'node:fs';
import 'node:buffer';
import 'node:child_process';
import '../shared/nuxi.BAGoDD49.mjs';
import 'child_process';
import 'path';
import 'fs';
import 'node:timers/promises';
import 'stream';
import 'node:util';
import '../shared/nuxi.BLb4POFS.mjs';
import 'node:assert';
import 'node:v8';
import 'node:fs/promises';
import 'node:module';
import './main.mjs';
import 'process';
import 'readline';

const info = defineCommand({
  meta: {
    name: "info",
    description: "Get information about Nuxt project"
  },
  args: {
    ...cwdArgs,
    ...legacyRootDirArgs
  },
  async run(ctx) {
    const cwd = resolve(ctx.args.cwd || ctx.args.rootDir);
    const nuxtConfig = await getNuxtConfig(cwd);
    const { dependencies = {}, devDependencies = {} } = await readPackageJSON(cwd).catch(() => ({}));
    const nuxtPath = tryResolveNuxt(cwd);
    async function getDepVersion(name) {
      for (const url of [cwd, nuxtPath]) {
        if (!url) {
          continue;
        }
        const pkg = await readPackageJSON(name, { url }).catch(() => null);
        if (pkg) {
          return pkg.version;
        }
      }
      return dependencies[name] || devDependencies[name];
    }
    async function listModules(arr = []) {
      const info = [];
      for (let m of arr) {
        if (Array.isArray(m)) {
          m = m[0];
        }
        const name = normalizeConfigModule(m, cwd);
        if (name) {
          const npmName = name.split("/").splice(0, 2).join("/");
          const v = await getDepVersion(npmName);
          info.push(`\`${v ? `${name}@${v}` : name}\``);
        }
      }
      return info.join(", ");
    }
    const nuxtVersion = await getDepVersion("nuxt") || await getDepVersion("nuxt-nightly") || await getDepVersion("nuxt-edge") || await getDepVersion("nuxt3") || "-";
    const isLegacy = nuxtVersion.startsWith("2");
    const builder = !isLegacy ? nuxtConfig.builder || "-" : nuxtConfig.bridge?.vite ? "vite" : nuxtConfig.buildModules?.includes("nuxt-vite") ? "vite" : "webpack";
    let packageManager = (await detectPackageManager(cwd))?.name;
    if (packageManager) {
      packageManager += `@${getPackageManagerVersion(packageManager)}`;
    }
    const infoObj = {
      OperatingSystem: os.type(),
      NodeVersion: process.version,
      NuxtVersion: nuxtVersion,
      CLIVersion: version,
      NitroVersion: await getDepVersion("nitropack"),
      PackageManager: packageManager ?? "unknown",
      Builder: typeof builder === "string" ? builder : "custom",
      UserConfig: Object.keys(nuxtConfig).map((key) => `\`${key}\``).join(", "),
      RuntimeModules: await listModules(nuxtConfig.modules),
      BuildModules: await listModules(nuxtConfig.buildModules || [])
    };
    logger.log("Working directory:", cwd);
    let maxLength = 0;
    const entries = Object.entries(infoObj).map(([key, val]) => {
      const label = splitByCase(key).join(" ");
      if (label.length > maxLength) {
        maxLength = label.length;
      }
      return [label, val || "-"];
    });
    let infoStr = "";
    for (const [label, value] of entries) {
      infoStr += `- ${`${label}: `.padEnd(maxLength + 2)}${value.includes("`") ? value : `\`${value}\``}
`;
    }
    const copied = !v && await clipboard.write(infoStr).then(() => true).catch(() => false);
    const isNuxt3 = !isLegacy;
    const isBridge = !isNuxt3 && infoObj.BuildModules.includes("bridge");
    const repo = isBridge ? "nuxt/bridge" : "nuxt/nuxt";
    const log = [
      (isNuxt3 || isBridge) && `\u{1F449} Report an issue: https://github.com/${repo}/issues/new?template=bug-report.yml`,
      (isNuxt3 || isBridge) && `\u{1F449} Suggest an improvement: https://github.com/${repo}/discussions/new`,
      `\u{1F449} Read documentation: ${isNuxt3 || isBridge ? "https://nuxt.com" : "https://v2.nuxt.com"}`
    ].filter(Boolean).join("\n");
    const splitter = "------------------------------";
    logger.log(`Nuxt project info: ${copied ? "(copied to clipboard)" : ""}

${splitter}
${infoStr}${splitter}

${log}
`);
  }
});
function normalizeConfigModule(module, rootDir) {
  if (!module) {
    return null;
  }
  if (typeof module === "string") {
    return module.split(rootDir).pop().split("node_modules").pop().replace(/^\//, "");
  }
  if (typeof module === "function") {
    return `${module.name}()`;
  }
  if (Array.isArray(module)) {
    return normalizeConfigModule(module[0], rootDir);
  }
  return null;
}
async function getNuxtConfig(rootDir) {
  try {
    const { createJiti } = await import('./jiti.mjs');
    const jiti = createJiti(rootDir, {
      interopDefault: true,
      // allow using `~` and `@` in `nuxt.config`
      alias: {
        "~": rootDir,
        "@": rootDir
      }
    });
    globalThis.defineNuxtConfig = (c) => c;
    const result = await jiti.import("./nuxt.config", { default: true });
    delete globalThis.defineNuxtConfig;
    return result;
  } catch {
    return {};
  }
}

export { info as default };
