{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,IAAI,QAAQ,EAAE,MAAM,YAAY,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AACpC,OAAO,EAAE,cAAc,EAA2B,MAAM,6BAA6B,CAAC;AAItF,MAAM,QAAQ,GAAG,sBAAsB,CAAC;AACxC,MAAM,QAAQ,GAAG,uDAAuD,CAAC;AACzE,MAAM,QAAQ,GAAG,eAAe,CAAC;AA6BjC,MAAM,gBAAgB,GAAuB;IACzC,aAAa,EAAE,KAAK;IACpB,QAAQ,EAAE,KAAK;IACf,UAAU,EAAE,KAAK;CACpB,CAAC;AAEF,MAAM,MAAM,GAA6D,OAAO,CAAC,EAAE;IAC/E,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAC9D,MAAM,GAAG,GAAG,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC;IACrC,MAAM,cAAc,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAC3C,MAAM,UAAU,GAAG,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;IAEzC,SAAS,IAAI,CAAC,IAAY,EAAE,KAAa;QACrC,uDAAuD;QACvD,gHAAgH;QAChH,OAAO;YACH,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,IAAI;YACX,IAAI,EAAE;gBACF,KAAK,EAAE,MAAM;gBACb,WAAW,EAAE;oBACT,IAAI,EAAE,KAAK;oBACX,SAAS,EAAE,KAAK;iBACnB;gBACD,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;aAC7C;SACJ,CAAC;IACN,CAAC;IAED,SAAS,eAAe,CAAC,KAAa;QAClC,gGAAgG;QAChG,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa;QAC/E,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,wBAAwB;QAC5G,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7E,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9E,MAAM,IAAI,GAAG,QAAQ,IAAI,aAAa,IAAI,WAAW,IAAI,QAAQ,CAAC;QAClE,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,OAAO,KAAK,CAAC;QACjB,CAAC;QACD,MAAM,WAAW,GAAG,CAAC,CAAC,QAAQ,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACrG,MAAM,gBAAgB,GAAG,CAAC,CAAC,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5G,MAAM,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QAC9B,MAAM,QAAQ,GAAG,gBAAgB,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,GAAG,WAAW,CAAC;QACtE,IAAI,UAAU,EAAE,CAAC;YACb,OAAO,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,CAAC;QACnD,CAAC;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,SAAS,YAAY,CAAC,KAAa;QAC/B,IAAI,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE1B,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE,CAAC;YAC7B,OAAO,KAAK,CAAC;QACjB,CAAC;QAED,IAAI,GAAG,EAAE,CAAC;YACN,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;QACpB,CAAC;QAED,IAAI,UAAU,EAAE,CAAC;YACb,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,QAAQ,CAAC;YACnE,OAAO,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC5B,CAAC;QAED,OAAO,GAAG,CAAC;IACf,CAAC;IAED,MAAM,SAAS,GAAsB,CAAC,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC;IAChE,IAAI,cAAc,EAAE,CAAC;QACjB,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC;IAChD,CAAC;IAED,SAAS,WAAW,CAAC,IAAW;QAC5B,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACpC,CAAC;IAED,OAAO,WAAW,CAAC;AACvB,CAAC,CAAC;AAEF,eAAe,MAAM,CAAC","sourcesContent":["import { get as getEmoji } from 'node-emoji';\nimport { emoticon } from 'emoticon';\nimport { findAndReplace, type Find, type Replace } from 'mdast-util-find-and-replace';\nimport type { Plugin } from 'unified';\nimport type { Root, Nodes, Text } from 'mdast';\n\nconst RE_EMOJI = /:\\+1:|:-1:|:[\\w-]+:/g;\nconst RE_SHORT = /(^|\\s)[@$|*'\",;.=:\\-)([\\]\\\\/<>038BOopPsSdDxXzZ]{2,5}/g;\nconst RE_PUNCT = /(?:_|-(?!1))/g;\n\n/**\n * Configuration of remark-emoji plugin.\n */\nexport interface RemarkEmojiOptions {\n    /**\n     * Makes converted emoji and emoticon texts accessible by wrapping them with\n     * `span` element setting `role` and `aria-label` attributes.\n     *\n     * @defaultValue false\n     */\n    accessible?: boolean;\n    /**\n     * Adds an extra whitespace after emoji.\n     * Useful when browser handle emojis with half character length and\n     * the following character is hidden.\n     *\n     * @defaultValue false\n     */\n    padSpaceAfter?: boolean;\n    /**\n     * Whether to support emoticon shortcodes (e.g. :-) will be replaced by ðŸ˜ƒ)\n     *\n     * @defaultValue false\n     */\n    emoticon?: boolean;\n}\n\nconst DEFAULT_SETTINGS: RemarkEmojiOptions = {\n    padSpaceAfter: false,\n    emoticon: false,\n    accessible: false,\n};\n\nconst plugin: Plugin<[(RemarkEmojiOptions | null | undefined)?], Root> = options => {\n    const settings = Object.assign({}, DEFAULT_SETTINGS, options);\n    const pad = !!settings.padSpaceAfter;\n    const emoticonEnable = !!settings.emoticon;\n    const accessible = !!settings.accessible;\n\n    function aria(text: string, label: string): Text {\n        // Creating HTML node in Markdown node is undocumented.\n        // https://github.com/syntax-tree/mdast-util-math/blob/e70bb824dc70f5423324b31b0b68581cf6698fe8/index.js#L44-L55\n        return {\n            type: 'text',\n            value: text,\n            data: {\n                hName: 'span',\n                hProperties: {\n                    role: 'img',\n                    ariaLabel: label,\n                },\n                hChildren: [{ type: 'text', value: text }],\n            },\n        };\n    }\n\n    function replaceEmoticon(match: string): string | false | Text {\n        // find emoji by shortcode - full match or with-out last char as it could be from text e.g. :-),\n        const iconFull = emoticon.find(e => e.emoticons.includes(match)); // full match\n        const iconPartStart = emoticon.find(e => e.emoticons.includes(match.slice(0, -1))); // second search pattern\n        const iconPartEnd = emoticon.find(e => e.emoticons.includes(match.slice(1)));\n        const iconPart = emoticon.find(e => e.emoticons.includes(match.slice(1, -1)));\n        const icon = iconFull || iconPartStart || iconPartEnd || iconPart;\n        if (!icon) {\n            return false;\n        }\n        const trimmedChar = !(iconFull || iconPartEnd) && (iconPart || iconPartStart) ? match.slice(-1) : '';\n        const startTrimmedChar = !(iconFull || iconPartStart) && (iconPart || iconPartEnd) ? match.slice(0, 1) : '';\n        const addPad = pad ? ' ' : '';\n        const replaced = startTrimmedChar + icon.emoji + addPad + trimmedChar;\n        if (accessible) {\n            return aria(replaced, icon.name + ' emoticon');\n        }\n        return replaced;\n    }\n\n    function replaceEmoji(match: string): string | false | Text {\n        let got = getEmoji(match);\n\n        if (typeof got === 'undefined') {\n            return false;\n        }\n\n        if (pad) {\n            got = got + ' ';\n        }\n\n        if (accessible) {\n            const label = match.slice(1, -1).replace(RE_PUNCT, ' ') + ' emoji';\n            return aria(got, label);\n        }\n\n        return got;\n    }\n\n    const replacers: [Find, Replace][] = [[RE_EMOJI, replaceEmoji]];\n    if (emoticonEnable) {\n        replacers.push([RE_SHORT, replaceEmoticon]);\n    }\n\n    function transformer(tree: Nodes): void {\n        findAndReplace(tree, replacers);\n    }\n\n    return transformer;\n};\n\nexport default plugin;\n"]}